/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-22")
public class ArchitectureInfo implements org.apache.thrift.TBase<ArchitectureInfo, ArchitectureInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ArchitectureInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ArchitectureInfo");

  private static final org.apache.thrift.protocol.TField SCIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("science", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BOOLEAN_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanString", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArchitectureInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArchitectureInfoTupleSchemeFactory();

  public double science; // required
  public double cost; // required
  public java.lang.String booleanString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCIENCE((short)1, "science"),
    COST((short)2, "cost"),
    BOOLEAN_STRING((short)3, "booleanString");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCIENCE
          return SCIENCE;
        case 2: // COST
          return COST;
        case 3: // BOOLEAN_STRING
          return BOOLEAN_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCIENCE_ISSET_ID = 0;
  private static final int __COST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCIENCE, new org.apache.thrift.meta_data.FieldMetaData("science", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOLEAN_STRING, new org.apache.thrift.meta_data.FieldMetaData("booleanString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArchitectureInfo.class, metaDataMap);
  }

  public ArchitectureInfo() {
  }

  public ArchitectureInfo(
    double science,
    double cost,
    java.lang.String booleanString)
  {
    this();
    this.science = science;
    setScienceIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
    this.booleanString = booleanString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ArchitectureInfo(ArchitectureInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.science = other.science;
    this.cost = other.cost;
    if (other.isSetBooleanString()) {
      this.booleanString = other.booleanString;
    }
  }

  public ArchitectureInfo deepCopy() {
    return new ArchitectureInfo(this);
  }

  @Override
  public void clear() {
    setScienceIsSet(false);
    this.science = 0.0;
    setCostIsSet(false);
    this.cost = 0.0;
    this.booleanString = null;
  }

  public double getScience() {
    return this.science;
  }

  public ArchitectureInfo setScience(double science) {
    this.science = science;
    setScienceIsSet(true);
    return this;
  }

  public void unsetScience() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCIENCE_ISSET_ID);
  }

  /** Returns true if field science is set (has been assigned a value) and false otherwise */
  public boolean isSetScience() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCIENCE_ISSET_ID);
  }

  public void setScienceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCIENCE_ISSET_ID, value);
  }

  public double getCost() {
    return this.cost;
  }

  public ArchitectureInfo setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  public java.lang.String getBooleanString() {
    return this.booleanString;
  }

  public ArchitectureInfo setBooleanString(java.lang.String booleanString) {
    this.booleanString = booleanString;
    return this;
  }

  public void unsetBooleanString() {
    this.booleanString = null;
  }

  /** Returns true if field booleanString is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanString() {
    return this.booleanString != null;
  }

  public void setBooleanStringIsSet(boolean value) {
    if (!value) {
      this.booleanString = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SCIENCE:
      if (value == null) {
        unsetScience();
      } else {
        setScience((java.lang.Double)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((java.lang.Double)value);
      }
      break;

    case BOOLEAN_STRING:
      if (value == null) {
        unsetBooleanString();
      } else {
        setBooleanString((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCIENCE:
      return getScience();

    case COST:
      return getCost();

    case BOOLEAN_STRING:
      return getBooleanString();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCIENCE:
      return isSetScience();
    case COST:
      return isSetCost();
    case BOOLEAN_STRING:
      return isSetBooleanString();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ArchitectureInfo)
      return this.equals((ArchitectureInfo)that);
    return false;
  }

  public boolean equals(ArchitectureInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_science = true;
    boolean that_present_science = true;
    if (this_present_science || that_present_science) {
      if (!(this_present_science && that_present_science))
        return false;
      if (this.science != that.science)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_booleanString = true && this.isSetBooleanString();
    boolean that_present_booleanString = true && that.isSetBooleanString();
    if (this_present_booleanString || that_present_booleanString) {
      if (!(this_present_booleanString && that_present_booleanString))
        return false;
      if (!this.booleanString.equals(that.booleanString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(science);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cost);

    hashCode = hashCode * 8191 + ((isSetBooleanString()) ? 131071 : 524287);
    if (isSetBooleanString())
      hashCode = hashCode * 8191 + booleanString.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ArchitectureInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScience()).compareTo(other.isSetScience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.science, other.science);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBooleanString()).compareTo(other.isSetBooleanString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanString, other.booleanString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ArchitectureInfo(");
    boolean first = true;

    sb.append("science:");
    sb.append(this.science);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanString:");
    if (this.booleanString == null) {
      sb.append("null");
    } else {
      sb.append(this.booleanString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArchitectureInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchitectureInfoStandardScheme getScheme() {
      return new ArchitectureInfoStandardScheme();
    }
  }

  private static class ArchitectureInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArchitectureInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ArchitectureInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.science = iprot.readDouble();
              struct.setScienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOOLEAN_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.booleanString = iprot.readString();
              struct.setBooleanStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ArchitectureInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCIENCE_FIELD_DESC);
      oprot.writeDouble(struct.science);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      if (struct.booleanString != null) {
        oprot.writeFieldBegin(BOOLEAN_STRING_FIELD_DESC);
        oprot.writeString(struct.booleanString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArchitectureInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchitectureInfoTupleScheme getScheme() {
      return new ArchitectureInfoTupleScheme();
    }
  }

  private static class ArchitectureInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArchitectureInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ArchitectureInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScience()) {
        optionals.set(0);
      }
      if (struct.isSetCost()) {
        optionals.set(1);
      }
      if (struct.isSetBooleanString()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScience()) {
        oprot.writeDouble(struct.science);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
      if (struct.isSetBooleanString()) {
        oprot.writeString(struct.booleanString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ArchitectureInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.science = iprot.readDouble();
        struct.setScienceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.booleanString = iprot.readString();
        struct.setBooleanStringIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

